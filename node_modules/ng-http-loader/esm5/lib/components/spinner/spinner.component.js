/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { Component, Input } from '@angular/core';
import { EMPTY, merge, timer } from 'rxjs';
import { debounce, delayWhen } from 'rxjs/operators';
import { PendingInterceptorService } from '../../services/pending-interceptor.service';
import { SpinnerVisibilityService } from '../../services/spinner-visibility.service';
import { Spinkit } from '../../spinkits';
var SpinnerComponent = /** @class */ (function () {
    function SpinnerComponent(pendingInterceptorService, spinnerVisibilityService) {
        this.pendingInterceptorService = pendingInterceptorService;
        this.spinnerVisibilityService = spinnerVisibilityService;
        this.spinkit = Spinkit;
        this.spinner = Spinkit.skCubeGrid;
        this.filteredUrlPatterns = [];
        this.debounceDelay = 0;
        this.minDuration = 0;
        this.entryComponent = null;
        this.subscriptions = merge(this.pendingInterceptorService.pendingRequestsStatus$.pipe(debounce(this.handleDebounceDelay.bind(this)), delayWhen(this.handleMinDuration.bind(this))), this.spinnerVisibilityService.visibilityObservable$)
            .subscribe(this.handleSpinnerVisibility().bind(this));
    }
    /**
     * @return {?}
     */
    SpinnerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.nullifySpinnerIfComponentOutletIsDefined();
        if (!(this.filteredUrlPatterns instanceof Array)) {
            throw new TypeError('`filteredUrlPatterns` must be an array.');
        }
        if (!!this.filteredUrlPatterns.length) {
            this.filteredUrlPatterns.forEach(function (e) {
                _this.pendingInterceptorService.filteredUrlPatterns.push(new RegExp(e));
            });
        }
    };
    /**
     * @return {?}
     */
    SpinnerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.unsubscribe();
    };
    /**
     * @return {?}
     */
    SpinnerComponent.prototype.nullifySpinnerIfComponentOutletIsDefined = /**
     * @return {?}
     */
    function () {
        if (null != this.entryComponent) {
            this.spinner = null;
        }
    };
    /**
     * @return {?}
     */
    SpinnerComponent.prototype.handleSpinnerVisibility = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return function (v) { return _this.isSpinnerVisible = v; };
    };
    /**
     * @param {?} hasPendingRequests
     * @return {?}
     */
    SpinnerComponent.prototype.handleDebounceDelay = /**
     * @param {?} hasPendingRequests
     * @return {?}
     */
    function (hasPendingRequests) {
        if (hasPendingRequests && !!this.debounceDelay) {
            return timer(this.debounceDelay);
        }
        return EMPTY;
    };
    /**
     * @param {?} hasPendingRequests
     * @return {?}
     */
    SpinnerComponent.prototype.handleMinDuration = /**
     * @param {?} hasPendingRequests
     * @return {?}
     */
    function (hasPendingRequests) {
        if (hasPendingRequests || !this.minDuration) {
            this.startTime = Date.now();
            return timer(0);
        }
        var /** @type {?} */ timerObservable = timer(this.minDuration - (Date.now() - this.startTime));
        this.startTime = null;
        return timerObservable;
    };
    SpinnerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'spinner',
                    template: "<div id=\"spinner\" *ngIf=\"isSpinnerVisible\">\n\n    <ng-container *ngComponentOutlet=\"entryComponent\"></ng-container>\n\n    <sk-cube-grid\n        *ngIf=\"spinner === spinkit.skCubeGrid\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-cube-grid>\n\n    <sk-chasing-dots\n        *ngIf=\"spinner === spinkit.skChasingDots\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-chasing-dots>\n\n    <sk-double-bounce\n        *ngIf=\"spinner === spinkit.skDoubleBounce\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-double-bounce>\n\n    <sk-rotating-plane\n        *ngIf=\"spinner === spinkit.skRotatingPlane\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-rotating-plane>\n\n    <sk-spinner-pulse\n        *ngIf=\"spinner === spinkit.skSpinnerPulse\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-spinner-pulse>\n\n    <sk-three-bounce\n        *ngIf=\"spinner === spinkit.skThreeBounce\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-three-bounce>\n\n    <sk-wandering-cubes\n        *ngIf=\"spinner === spinkit.skWanderingCubes\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-wandering-cubes>\n\n    <sk-wave\n        *ngIf=\"spinner === spinkit.skWave\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-wave>\n\n</div>\n\n",
                    styles: ["#spinner{top:0;left:0;height:100%;width:100%;position:fixed;z-index:9999;opacity:.7;background-color:#f1f1f1;display:flex;align-items:center;justify-content:center}::ng-deep .colored-parent,::ng-deep .colored>div{background-color:#333}"]
                },] },
    ];
    /** @nocollapse */
    SpinnerComponent.ctorParameters = function () { return [
        { type: PendingInterceptorService, },
        { type: SpinnerVisibilityService, },
    ]; };
    SpinnerComponent.propDecorators = {
        "backgroundColor": [{ type: Input },],
        "spinner": [{ type: Input },],
        "filteredUrlPatterns": [{ type: Input },],
        "debounceDelay": [{ type: Input },],
        "minDuration": [{ type: Input },],
        "entryComponent": [{ type: Input },],
    };
    return SpinnerComponent;
}());
export { SpinnerComponent };
function SpinnerComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    SpinnerComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    SpinnerComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    SpinnerComponent.propDecorators;
    /** @type {?} */
    SpinnerComponent.prototype.isSpinnerVisible;
    /** @type {?} */
    SpinnerComponent.prototype.spinkit;
    /** @type {?} */
    SpinnerComponent.prototype.subscriptions;
    /** @type {?} */
    SpinnerComponent.prototype.startTime;
    /** @type {?} */
    SpinnerComponent.prototype.backgroundColor;
    /** @type {?} */
    SpinnerComponent.prototype.spinner;
    /** @type {?} */
    SpinnerComponent.prototype.filteredUrlPatterns;
    /** @type {?} */
    SpinnerComponent.prototype.debounceDelay;
    /** @type {?} */
    SpinnerComponent.prototype.minDuration;
    /** @type {?} */
    SpinnerComponent.prototype.entryComponent;
    /** @type {?} */
    SpinnerComponent.prototype.pendingInterceptorService;
    /** @type {?} */
    SpinnerComponent.prototype.spinnerVisibilityService;
}

//# sourceMappingURL=data:application/json;base64,