/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { Component, Input } from '@angular/core';
import { EMPTY, merge, timer } from 'rxjs';
import { debounce, delayWhen } from 'rxjs/operators';
import { PendingInterceptorService } from '../../services/pending-interceptor.service';
import { SpinnerVisibilityService } from '../../services/spinner-visibility.service';
import { Spinkit } from '../../spinkits';
export class SpinnerComponent {
    /**
     * @param {?} pendingInterceptorService
     * @param {?} spinnerVisibilityService
     */
    constructor(pendingInterceptorService, spinnerVisibilityService) {
        this.pendingInterceptorService = pendingInterceptorService;
        this.spinnerVisibilityService = spinnerVisibilityService;
        this.spinkit = Spinkit;
        this.spinner = Spinkit.skCubeGrid;
        this.filteredUrlPatterns = [];
        this.debounceDelay = 0;
        this.minDuration = 0;
        this.entryComponent = null;
        this.subscriptions = merge(this.pendingInterceptorService.pendingRequestsStatus$.pipe(debounce(this.handleDebounceDelay.bind(this)), delayWhen(this.handleMinDuration.bind(this))), this.spinnerVisibilityService.visibilityObservable$)
            .subscribe(this.handleSpinnerVisibility().bind(this));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.nullifySpinnerIfComponentOutletIsDefined();
        if (!(this.filteredUrlPatterns instanceof Array)) {
            throw new TypeError('`filteredUrlPatterns` must be an array.');
        }
        if (!!this.filteredUrlPatterns.length) {
            this.filteredUrlPatterns.forEach(e => {
                this.pendingInterceptorService.filteredUrlPatterns.push(new RegExp(e));
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    /**
     * @return {?}
     */
    nullifySpinnerIfComponentOutletIsDefined() {
        if (null != this.entryComponent) {
            this.spinner = null;
        }
    }
    /**
     * @return {?}
     */
    handleSpinnerVisibility() {
        return v => this.isSpinnerVisible = v;
    }
    /**
     * @param {?} hasPendingRequests
     * @return {?}
     */
    handleDebounceDelay(hasPendingRequests) {
        if (hasPendingRequests && !!this.debounceDelay) {
            return timer(this.debounceDelay);
        }
        return EMPTY;
    }
    /**
     * @param {?} hasPendingRequests
     * @return {?}
     */
    handleMinDuration(hasPendingRequests) {
        if (hasPendingRequests || !this.minDuration) {
            this.startTime = Date.now();
            return timer(0);
        }
        const /** @type {?} */ timerObservable = timer(this.minDuration - (Date.now() - this.startTime));
        this.startTime = null;
        return timerObservable;
    }
}
SpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'spinner',
                template: `<div id="spinner" *ngIf="isSpinnerVisible">

    <ng-container *ngComponentOutlet="entryComponent"></ng-container>

    <sk-cube-grid
        *ngIf="spinner === spinkit.skCubeGrid"
        [backgroundColor]="backgroundColor">
    </sk-cube-grid>

    <sk-chasing-dots
        *ngIf="spinner === spinkit.skChasingDots"
        [backgroundColor]="backgroundColor">
    </sk-chasing-dots>

    <sk-double-bounce
        *ngIf="spinner === spinkit.skDoubleBounce"
        [backgroundColor]="backgroundColor">
    </sk-double-bounce>

    <sk-rotating-plane
        *ngIf="spinner === spinkit.skRotatingPlane"
        [backgroundColor]="backgroundColor">
    </sk-rotating-plane>

    <sk-spinner-pulse
        *ngIf="spinner === spinkit.skSpinnerPulse"
        [backgroundColor]="backgroundColor">
    </sk-spinner-pulse>

    <sk-three-bounce
        *ngIf="spinner === spinkit.skThreeBounce"
        [backgroundColor]="backgroundColor">
    </sk-three-bounce>

    <sk-wandering-cubes
        *ngIf="spinner === spinkit.skWanderingCubes"
        [backgroundColor]="backgroundColor">
    </sk-wandering-cubes>

    <sk-wave
        *ngIf="spinner === spinkit.skWave"
        [backgroundColor]="backgroundColor">
    </sk-wave>

</div>

`,
                styles: [`#spinner{top:0;left:0;height:100%;width:100%;position:fixed;z-index:9999;opacity:.7;background-color:#f1f1f1;display:flex;align-items:center;justify-content:center}::ng-deep .colored-parent,::ng-deep .colored>div{background-color:#333}`]
            },] },
];
/** @nocollapse */
SpinnerComponent.ctorParameters = () => [
    { type: PendingInterceptorService, },
    { type: SpinnerVisibilityService, },
];
SpinnerComponent.propDecorators = {
    "backgroundColor": [{ type: Input },],
    "spinner": [{ type: Input },],
    "filteredUrlPatterns": [{ type: Input },],
    "debounceDelay": [{ type: Input },],
    "minDuration": [{ type: Input },],
    "entryComponent": [{ type: Input },],
};
function SpinnerComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    SpinnerComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    SpinnerComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    SpinnerComponent.propDecorators;
    /** @type {?} */
    SpinnerComponent.prototype.isSpinnerVisible;
    /** @type {?} */
    SpinnerComponent.prototype.spinkit;
    /** @type {?} */
    SpinnerComponent.prototype.subscriptions;
    /** @type {?} */
    SpinnerComponent.prototype.startTime;
    /** @type {?} */
    SpinnerComponent.prototype.backgroundColor;
    /** @type {?} */
    SpinnerComponent.prototype.spinner;
    /** @type {?} */
    SpinnerComponent.prototype.filteredUrlPatterns;
    /** @type {?} */
    SpinnerComponent.prototype.debounceDelay;
    /** @type {?} */
    SpinnerComponent.prototype.minDuration;
    /** @type {?} */
    SpinnerComponent.prototype.entryComponent;
    /** @type {?} */
    SpinnerComponent.prototype.pendingInterceptorService;
    /** @type {?} */
    SpinnerComponent.prototype.spinnerVisibilityService;
}

//# sourceMappingURL=data:application/json;base64,