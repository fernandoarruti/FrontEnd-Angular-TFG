/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ReplaySubject, throwError } from 'rxjs';
import { catchError, finalize, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class PendingInterceptorService {
    constructor() {
        this._pendingRequests = 0;
        this._pendingRequestsStatus = new ReplaySubject(1);
        this._filteredUrlPatterns = [];
    }
    /**
     * @deprecated Deprecated in favor of pendingRequestsStatus$
     * @return {?}
     */
    get pendingRequestsStatus() {
        return this._pendingRequestsStatus.asObservable();
    }
    /**
     * @return {?}
     */
    get pendingRequestsStatus$() {
        return this.pendingRequestsStatus;
    }
    /**
     * @return {?}
     */
    get pendingRequests() {
        return this._pendingRequests;
    }
    /**
     * @return {?}
     */
    get filteredUrlPatterns() {
        return this._filteredUrlPatterns;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set forceByPass(value) {
        this._forceByPass = value;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    shouldBypassUrl(url) {
        return this._filteredUrlPatterns.some(e => {
            return e.test(url);
        });
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        const /** @type {?} */ shouldBypass = this.shouldBypassUrl(req.urlWithParams) || this._forceByPass;
        if (!shouldBypass) {
            this._pendingRequests++;
            if (1 === this._pendingRequests) {
                this._pendingRequestsStatus.next(true);
            }
        }
        return next.handle(req).pipe(map(event => {
            return event;
        }), catchError(error => {
            return throwError(error);
        }), finalize(() => {
            if (!shouldBypass) {
                this._pendingRequests--;
                if (0 === this._pendingRequests) {
                    this._pendingRequestsStatus.next(false);
                }
            }
        }));
    }
}
PendingInterceptorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */ PendingInterceptorService.ngInjectableDef = i0.defineInjectable({ factory: function PendingInterceptorService_Factory() { return new PendingInterceptorService(); }, token: PendingInterceptorService, providedIn: "root" });
function PendingInterceptorService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    PendingInterceptorService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    PendingInterceptorService.ctorParameters;
    /** @type {?} */
    PendingInterceptorService.prototype._pendingRequests;
    /** @type {?} */
    PendingInterceptorService.prototype._pendingRequestsStatus;
    /** @type {?} */
    PendingInterceptorService.prototype._filteredUrlPatterns;
    /** @type {?} */
    PendingInterceptorService.prototype._forceByPass;
}
export const /** @type {?} */ PendingInterceptorServiceInterceptor = [{
        provide: HTTP_INTERCEPTORS,
        useExisting: PendingInterceptorService,
        multi: true
    }];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVuZGluZy1pbnRlcmNlcHRvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctaHR0cC1sb2FkZXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvcGVuZGluZy1pbnRlcmNlcHRvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQVNBLE9BQU8sRUFBRSxpQkFBaUIsRUFBd0QsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRyxPQUFPLEVBQW9CLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQWMsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLM0QsTUFBTTs7Z0NBQ3lCLENBQUM7c0NBQzZCLElBQUksYUFBYSxDQUFVLENBQUMsQ0FBQztvQ0FDN0MsRUFBRTs7Ozs7O0lBSTNDLElBQUkscUJBQXFCO1FBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsWUFBWSxFQUFFLENBQUM7S0FDckQ7Ozs7SUFFRCxJQUFJLHNCQUFzQjtRQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDO0tBQ3JDOzs7O0lBRUQsSUFBSSxlQUFlO1FBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztLQUNoQzs7OztJQUVELElBQUksbUJBQW1CO1FBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUM7S0FDcEM7Ozs7O0lBRUQsSUFBSSxXQUFXLENBQUMsS0FBYztRQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztLQUM3Qjs7Ozs7SUFFTyxlQUFlLENBQUMsR0FBVztRQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN0QyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN0QixDQUFDLENBQUM7Ozs7Ozs7SUFHUCxTQUFTLENBQUMsR0FBcUIsRUFBRSxJQUFpQjtRQUM5Qyx1QkFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQztRQUVsRixFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDaEIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFFeEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDMUM7U0FDSjtRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDeEIsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1IsTUFBTSxDQUFDLEtBQUssQ0FBQztTQUNoQixDQUFDLEVBQ0YsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2YsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM1QixDQUFDLEVBQ0YsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUNWLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztnQkFDaEIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7Z0JBRXhCLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO29CQUM5QixJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUMzQzthQUNKO1NBQ0osQ0FBQyxDQUNMLENBQUM7S0FDTDs7O1lBaEVKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpRUQsTUFBTSxDQUFDLHVCQUFNLG9DQUFvQyxHQUF1QixDQUFDO1FBQ3JFLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsV0FBVyxFQUFFLHlCQUF5QjtRQUN0QyxLQUFLLEVBQUUsSUFBSTtLQUNkLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xuICogRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXG4gKiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbmltcG9ydCB7IEhUVFBfSU5URVJDRVBUT1JTLCBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgRXhpc3RpbmdQcm92aWRlciwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgZmluYWxpemUsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQZW5kaW5nSW50ZXJjZXB0b3JTZXJ2aWNlIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcbiAgICBwcml2YXRlIF9wZW5kaW5nUmVxdWVzdHMgPSAwO1xuICAgIHByaXZhdGUgX3BlbmRpbmdSZXF1ZXN0c1N0YXR1czogUmVwbGF5U3ViamVjdDxib29sZWFuPiA9IG5ldyBSZXBsYXlTdWJqZWN0PGJvb2xlYW4+KDEpO1xuICAgIHByaXZhdGUgX2ZpbHRlcmVkVXJsUGF0dGVybnM6IFJlZ0V4cFtdID0gW107XG4gICAgcHJpdmF0ZSBfZm9yY2VCeVBhc3M6IGJvb2xlYW47XG5cbiAgICAvKiogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBpbiBmYXZvciBvZiBwZW5kaW5nUmVxdWVzdHNTdGF0dXMkICovXG4gICAgZ2V0IHBlbmRpbmdSZXF1ZXN0c1N0YXR1cygpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BlbmRpbmdSZXF1ZXN0c1N0YXR1cy5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICBnZXQgcGVuZGluZ1JlcXVlc3RzU3RhdHVzJCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVuZGluZ1JlcXVlc3RzU3RhdHVzO1xuICAgIH1cblxuICAgIGdldCBwZW5kaW5nUmVxdWVzdHMoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BlbmRpbmdSZXF1ZXN0cztcbiAgICB9XG5cbiAgICBnZXQgZmlsdGVyZWRVcmxQYXR0ZXJucygpOiBSZWdFeHBbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJlZFVybFBhdHRlcm5zO1xuICAgIH1cblxuICAgIHNldCBmb3JjZUJ5UGFzcyh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9mb3JjZUJ5UGFzcyA9IHZhbHVlO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2hvdWxkQnlwYXNzVXJsKHVybDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJlZFVybFBhdHRlcm5zLnNvbWUoZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZS50ZXN0KHVybCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgICAgICBjb25zdCBzaG91bGRCeXBhc3MgPSB0aGlzLnNob3VsZEJ5cGFzc1VybChyZXEudXJsV2l0aFBhcmFtcykgfHwgdGhpcy5fZm9yY2VCeVBhc3M7XG5cbiAgICAgICAgaWYgKCFzaG91bGRCeXBhc3MpIHtcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdSZXF1ZXN0cysrO1xuXG4gICAgICAgICAgICBpZiAoMSA9PT0gdGhpcy5fcGVuZGluZ1JlcXVlc3RzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1JlcXVlc3RzU3RhdHVzLm5leHQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKS5waXBlKFxuICAgICAgICAgICAgbWFwKGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZmluYWxpemUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghc2hvdWxkQnlwYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdSZXF1ZXN0cy0tO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgwID09PSB0aGlzLl9wZW5kaW5nUmVxdWVzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdSZXF1ZXN0c1N0YXR1cy5uZXh0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgUGVuZGluZ0ludGVyY2VwdG9yU2VydmljZUludGVyY2VwdG9yOiBFeGlzdGluZ1Byb3ZpZGVyW10gPSBbe1xuICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxuICAgIHVzZUV4aXN0aW5nOiBQZW5kaW5nSW50ZXJjZXB0b3JTZXJ2aWNlLFxuICAgIG11bHRpOiB0cnVlXG59XTtcbiJdfQ==